/**
 * ARCA
 * Aqui descripcion de la api
 *
 * OpenAPI spec version: 0.0.1
 * Contact: no hay
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AdopcionControllerService {

    protected basePath = 'https://vinculation.herokuapp.com/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * actualizarAdocion
     * 
     * @param idAdopcion idAdopcion
     * @param idAnimal idAnimal
     * @param descripcion 
     * @param fechaAdopcion 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public actualizarAdocionUsingPUT(idAdopcion: number, idAnimal: number, descripcion?: string, fechaAdopcion?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public actualizarAdocionUsingPUT(idAdopcion: number, idAnimal: number, descripcion?: string, fechaAdopcion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public actualizarAdocionUsingPUT(idAdopcion: number, idAnimal: number, descripcion?: string, fechaAdopcion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public actualizarAdocionUsingPUT(idAdopcion: number, idAnimal: number, descripcion?: string, fechaAdopcion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idAdopcion === null || idAdopcion === undefined) {
            throw new Error('Required parameter idAdopcion was null or undefined when calling actualizarAdocionUsingPUT.');
        }

        if (idAnimal === null || idAnimal === undefined) {
            throw new Error('Required parameter idAnimal was null or undefined when calling actualizarAdocionUsingPUT.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (descripcion !== undefined && descripcion !== null) {
            queryParameters = queryParameters.set('descripcion', <any>descripcion);
        }
        if (fechaAdopcion !== undefined && fechaAdopcion !== null) {
            queryParameters = queryParameters.set('fechaAdopcion', <any>fechaAdopcion);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/adopciones/${encodeURIComponent(String(idAdopcion))}/${encodeURIComponent(String(idAnimal))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * crearAdocion
     * 
     * @param idAdoptante idAdoptante
     * @param idAnimal idAnimal
     * @param descripcion 
     * @param fechaAdopcion 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public crearAdocionUsingPOST(idAdoptante: number, idAnimal: number, descripcion?: string, fechaAdopcion?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public crearAdocionUsingPOST(idAdoptante: number, idAnimal: number, descripcion?: string, fechaAdopcion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public crearAdocionUsingPOST(idAdoptante: number, idAnimal: number, descripcion?: string, fechaAdopcion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public crearAdocionUsingPOST(idAdoptante: number, idAnimal: number, descripcion?: string, fechaAdopcion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idAdoptante === null || idAdoptante === undefined) {
            throw new Error('Required parameter idAdoptante was null or undefined when calling crearAdocionUsingPOST.');
        }

        if (idAnimal === null || idAnimal === undefined) {
            throw new Error('Required parameter idAnimal was null or undefined when calling crearAdocionUsingPOST.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (descripcion !== undefined && descripcion !== null) {
            queryParameters = queryParameters.set('descripcion', <any>descripcion);
        }
        if (fechaAdopcion !== undefined && fechaAdopcion !== null) {
            queryParameters = queryParameters.set('fechaAdopcion', <any>fechaAdopcion);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/adopciones/${encodeURIComponent(String(idAdoptante))}/${encodeURIComponent(String(idAnimal))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * eliminarAdopcion
     * 
     * @param idAdopcion idAdopcion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eliminarAdopcionUsingDELETE(idAdopcion: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public eliminarAdopcionUsingDELETE(idAdopcion: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public eliminarAdopcionUsingDELETE(idAdopcion: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public eliminarAdopcionUsingDELETE(idAdopcion: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idAdopcion === null || idAdopcion === undefined) {
            throw new Error('Required parameter idAdopcion was null or undefined when calling eliminarAdopcionUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/adopciones/${encodeURIComponent(String(idAdopcion))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * etAdopcionPorId
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public etAdopcionPorIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public etAdopcionPorIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public etAdopcionPorIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public etAdopcionPorIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling etAdopcionPorIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/adopciones/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAdopcionesPorCedulaAdoptante
     * 
     * @param cedula cedula
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdopcionesPorCedulaAdoptanteUsingGET(cedula: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAdopcionesPorCedulaAdoptanteUsingGET(cedula: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAdopcionesPorCedulaAdoptanteUsingGET(cedula: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAdopcionesPorCedulaAdoptanteUsingGET(cedula: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cedula === null || cedula === undefined) {
            throw new Error('Required parameter cedula was null or undefined when calling getAdopcionesPorCedulaAdoptanteUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/adopciones/allbyci/${encodeURIComponent(String(cedula))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAdopcionesPorIdAdoptante
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdopcionesPorIdAdoptanteUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAdopcionesPorIdAdoptanteUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAdopcionesPorIdAdoptanteUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAdopcionesPorIdAdoptanteUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAdopcionesPorIdAdoptanteUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/adopciones/allbyid/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllAdopciones
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllAdopcionesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllAdopcionesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllAdopcionesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllAdopcionesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/adopciones/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
